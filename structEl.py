import numpy as np

bPawn = np.asarray([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,1,0,1,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])

wPawn = np.asarray([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,1,0,1,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])

pawnPen = np.asarray([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,1,0,1,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])

Knight = np.asarray([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,1,0,1,0,0,0,0,0,0],
                     [0,0,0,0,0,1,0,0,0,1,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,1,0,0,0,1,0,0,0,0,0],
                     [0,0,0,0,0,0,1,0,1,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])

Bishop = np.asarray([[1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                     [0,1,0,0,0,0,0,0,0,0,0,0,0,1,0],
                     [0,0,1,0,0,0,0,0,0,0,0,0,1,0,0],
                     [0,0,0,1,0,0,0,0,0,0,0,1,0,0,0],
                     [0,0,0,0,1,0,0,0,0,0,1,0,0,0,0],
                     [0,0,0,0,0,1,0,0,0,1,0,0,0,0,0],
                     [0,0,0,0,0,0,1,0,1,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,1,0,1,0,0,0,0,0,0],
                     [0,0,0,0,0,1,0,0,0,1,0,0,0,0,0],
                     [0,0,0,0,1,0,0,0,0,0,1,0,0,0,0],
                     [0,0,0,1,0,0,0,0,0,0,0,1,0,0,0],
                     [0,0,1,0,0,0,0,0,0,0,0,0,1,0,0],
                     [0,1,0,0,0,0,0,0,0,0,0,0,0,1,0],
                     [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1]])

Rook =   np.asarray([[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
                     [1,1,1,1,1,1,1,0,1,1,1,1,1,1,1],
                     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0]])

King =   np.asarray([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
                     [0,0,0,0,0,0,1,0,1,0,0,0,0,0,0],
                     [0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])


Queen = Bishop + Rook

class structEl():
    def __init__(self):
        self.Rk = self.setRook()
        self.Bp = self.setBishop()
        self.Qn = self.setQueen()
        self.Kn = self.setKnight()
        self.bP = self.setBlackPawn()
        self.wP = self.setWhitePawn()
        self.Pp = self.setPawnPenalty()
        self.Kg = self.setKing()

    def setKing():
        res = [[]]*64    
        for i in range(8):
            for j in range(8):
                bitar = []*64
                ar = King[7-i:15-i,7-j:15-j]
                for k in range(8):
                    bitar.extend(ar[k,:])
                res[i*8+j]=bitar    
        return np.asarray(res)

    def setBlackPawn(self):
        res = [[]]*64    
        for i in range(8):
            for j in range(8):
                bitar = []*64
                ar = bPawn[7-i:15-i,7-j:15-j]
                for k in range(8):
                    bitar.extend(ar[k,:])
                res[i*8+j]=bitar    
        return np.asarray(res)
    
    def setWhitePawn(self):
        res = [[]]*64    
        for i in range(8):
            for j in range(8):
                bitar = []*64
                ar = wPawn[7-i:15-i,7-j:15-j]
                for k in range(8):
                    bitar.extend(ar[k,:])
                res[i*8+j]=bitar    
        return np.asarray(res)
    
    def setPawnPenalty(self):
        res = [[]]*64    
        for i in range(8):
            for j in range(8):
                bitar = []*64
                ar = pawnPen[7-i:15-i,7-j:15-j]
                for k in range(8):
                    bitar.extend(ar[k,:])
                res[i*8+j]=bitar    
        return np.asarray(res)
    
    def setKnight(self):
        res = [[]]*64    
        for i in range(8):
            for j in range(8):
                bitar = []*64
                ar = Knight[7-i:15-i,7-j:15-j]
                for k in range(8):
                    bitar.extend(ar[k,:])
                res[i*8+j]=bitar    
        return np.asarray(res)
    
    def setRook(self):
        res = [[]]*64    
        for i in range(8):
            for j in range(8):
                bitar = []*64
                ar = Rook[7-i:15-i,7-j:15-j]
                for k in range(8):
                    bitar.extend(ar[k,:])
                res[i*8+j]=bitar    
        return np.asarray(res)
    
    def setBishop(self):
        res = [[]]*64    
        for i in range(8):
            for j in range(8):
                bitar = []*64
                ar = Bishop[7-i:15-i,7-j:15-j]
                for k in range(8):
                    bitar.extend(ar[k,:])
                res[i*8+j]=bitar    
        return np.asarray(res)
    
    def setQueen(self):
        res = [[]]*64    
        for i in range(8):
            for j in range(8):
                bitar = []*64
                ar = Queen[7-i:15-i,7-j:15-j]
                for k in range(8):
                    bitar.extend(ar[k,:])
                res[i*8+j]=bitar    
        return np.asarray(res)